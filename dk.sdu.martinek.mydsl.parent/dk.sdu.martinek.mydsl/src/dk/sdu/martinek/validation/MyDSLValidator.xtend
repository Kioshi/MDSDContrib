/*
 * generated by Xtext 2.16.0
 */
package dk.sdu.martinek.validation

import dk.sdu.martinek.myDSL.Widget
import java.util.ArrayList
import java.util.regex.Pattern
import java.util.stream.Collectors
import org.eclipse.xtext.validation.Check

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class MyDSLValidator extends AbstractMyDSLValidator {
	
	public static val INVALID_NAME = 'invalidName'

	@Check
	def checkWidgetDuplicates(Widget element) {
		val propetiesGrouped = element.properties.groupBy[e|e?.eGet(e?.eClass?.getEStructuralFeature("name"))]
		val propertiesDuplicated = propetiesGrouped.filter[p1, p2|p2.length>1]
		val onlytheEObjects = propertiesDuplicated.values().stream().flatMap(e|e.stream).collect(
			Collectors.toList())
		onlytheEObjects.forEach [ e |
			val nameRef = e?.eClass?.getEStructuralFeature("name")
			val nameAttr = e?.eGet(nameRef)

			error('Duplicate name ' + nameAttr + " for " + e.eClass.name,e, nameRef, INVALID_NAME)
		]
	}
	
	public static val MISSING_PROPERTIES = 'missingProperties'
	public static val UNUSED_PROPERTIES = 'unusedProperties'
	
	@Check
	def checkWidgetTemplate(Widget element) {
		val pattern = Pattern.compile("(%)([a-zA-Z]+?)(%)");
        val matcher = pattern.matcher(element.template.value);

        val  listMatches = new ArrayList<String>();

        while(matcher.find())
        {
            listMatches.add(matcher.group(2));
        }
        
        val missingProperties = new ArrayList<String>()
        element.properties.forEach[ property |
        	if (!listMatches.contains(property.name))
        	error('Property ' + property.name + " is unused in template", property, property.eClass.getEStructuralFeature("name"), UNUSED_PROPERTIES)
        ]
       
        listMatches.forEach[ match |
        	if (!element.properties.stream().map(e| e.name).collect(
				Collectors.toList()).contains(match))
        		missingProperties.add(match)        		
        ]
        
        if (!missingProperties.empty)
        {
        	if (missingProperties.size > 1)
        		error('Properties ' + missingProperties.stream().collect( Collectors.joining( "," ) ) + " are not defined in Widget", element.template, null, MISSING_PROPERTIES)
    		else
        		error('Property ' + missingProperties.get(0) + " is not defined in Widget", element.template, null, MISSING_PROPERTIES)
        	
        }
		
	}
}
