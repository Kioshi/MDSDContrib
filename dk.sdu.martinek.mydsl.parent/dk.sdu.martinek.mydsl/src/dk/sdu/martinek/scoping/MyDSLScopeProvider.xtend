/*
 * generated by Xtext 2.16.0
 */
package dk.sdu.martinek.scoping

import dk.sdu.martinek.myDSL.Attribute
import dk.sdu.martinek.myDSL.Entity
import dk.sdu.martinek.myDSL.MyDSLPackage
import dk.sdu.martinek.myDSL.Specification
import dk.sdu.martinek.myDSL.impl.AttributeImpl
import dk.sdu.martinek.myDSL.impl.EntityImpl
import dk.sdu.martinek.myDSL.impl.ModelImpl
import dk.sdu.martinek.myDSL.impl.MyEntityIdentifierImpl
import dk.sdu.martinek.myDSL.impl.SpecificationImpl
import dk.sdu.martinek.myDSL.impl.WidgetImpl
import java.util.ArrayList
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.resource.EObjectDescription
import org.eclipse.xtext.resource.impl.AliasedEObjectDescription
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.FilteringScope

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class MyDSLScopeProvider extends AbstractMyDSLScopeProvider {

	//@Inject extension MyDSLModelUtils
	
	override IScope getScope(EObject context, EReference reference) {
		// Only suggest entities that are not defined yet
		if (context instanceof ModelImpl && reference == MyDSLPackage.Literals.SPECIFICATION__REF)
		{		
	        val rootElement = EcoreUtil2.getRootContainer(context)
	        val elements = EcoreUtil2.getAllContentsOfType(rootElement, Entity)
			val alreadyDefined = new ArrayList<Entity>()
			val entities = new ArrayList<Entity>()
			for(Specification specification : (context as ModelImpl).specifications.specifications)
			{
				val type = specification.ref
				alreadyDefined.add(type)
				
			}
			elements.forEach[itr| 				
				if(!alreadyDefined.contains(itr))
					entities.add(itr);
			]
			
			return Scopes.scopeFor(entities)
		}
		
		// All Entities allowed in specification
		if (context instanceof SpecificationImpl && reference == MyDSLPackage.Literals.SPECIFICATION__REF)
		{		
	        val rootElement = EcoreUtil2.getRootContainer(context)
	        val elements = EcoreUtil2.getAllContentsOfType(rootElement, Entity)
			return Scopes.scopeFor(elements)
		}
		
		if (context instanceof AttributeImpl && reference.containerClass == Attribute)
		{
	        return Scopes.scopeFor(((((context as AttributeImpl).eContainer as SpecificationImpl).ref as EntityImpl).ref as WidgetImpl).properties)			
		}
		
		// Add possible properties to specification
		// Note - filtering by already added is not possible since context.attributes..property is unresolvable proxy
		if (context instanceof SpecificationImpl && reference == MyDSLPackage.Literals.ATTRIBUTE__REF)
		{		
	       
			val entity = (context as SpecificationImpl).ref
			
			val widget = entity.ref
			if (widget instanceof WidgetImpl)
			{
				return Scopes.scopeFor(widget.properties)
			}
			return IScope.NULLSCOPE
		}
		
		// Attribute entities
		if (context instanceof MyEntityIdentifierImpl && reference == MyDSLPackage.Literals.MY_ENTITY_IDENTIFIER__REF)
		{
	        val rootElement = EcoreUtil2.getRootContainer(context)
	        val candidates = EcoreUtil2.getAllContentsOfType(rootElement, Entity)
			val elements = new ArrayList<EObject>()
			elements.addAll(candidates);
			val s2 = super.getScope(context, reference)
			val s1 = Scopes.scopeFor(elements, s2)
			return s1
		}
		
		// Layout entitites - no need to modify scope
		if (context instanceof EntityImpl && reference == MyDSLPackage.Literals.ENTITY__REF)
		{	
			return super.getScope(context, reference)
		}
		
		// Attribute entities suggestions
		if (context instanceof AttributeImpl && reference == MyDSLPackage.Literals.MY_ENTITY_IDENTIFIER__REF)
		{
			val scope = super.getScope(context, reference)
			val x = new FilteringScope(scope, [itr| 
				if (itr instanceof AliasedEObjectDescription || itr.class === EObjectDescription)
				{
					return false
				}
				return true
			])
	        val rootElement = EcoreUtil2.getRootContainer(context)
	        val candidates = EcoreUtil2.getAllContentsOfType(rootElement, Entity)
			return Scopes.scopeFor(candidates, x)
		}
	
		super.getScope(context, reference)
	}	
}
